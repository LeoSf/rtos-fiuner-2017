/* Copyright 2014, Mariano Cerdeiro                                          */
/* Copyright 2014, Pablo Ridolfi                                             */
/* Copyright 2014, Juan Cecconi                                              */
/* Copyright 2014, Gustavo Muro                                              */
/*                                                                           */
/* This file is part of CIAA Firmware.                                       */
/*                                                                           */
/* Redistribution and use in source and binary forms, with or without        */
/* modification, are permitted provided that the following conditions are    */
/* met:                                                                      */
/*                                                                           */
/* 1. Redistributions of source code must retain the above copyright notice, */
/*    this list of conditions and the following disclaimer.                  */
/*                                                                           */
/* 2. Redistributions in binary form must reproduce the above copyright      */
/*    notice, this list of conditions and the following disclaimer in the    */
/*    documentation and/or other materials provided with the distribution.   */
/*                                                                           */
/* 3. Neither the name of the copyright holder nor the names of its          */
/*    contributors may be used to endorse or promote products derived from   */
/*    this software without specific prior written permission.               */
/*                                                                           */
/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       */
/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED */
/* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A           */
/* PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER */
/* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  */
/* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,       */
/* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR        */
/* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    */
/* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING      */
/* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS        */
/* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              */
/*                                                                           */
/*****************************************************************************/
/*  Blinking example OIL configuration file                                  */
/*                                                                           */
/*  This file describes the current OSEK configuration.                      */
/*  References:                                                              */
/*  - OSEK OS standard: http://portal.osek-vdx.org/files/pdf/specs/os223.pdf */
/*  - OSEK OIL standard: http://portal.osek-vdx.org/files/pdf/specs/oil25.pdf*/
/*****************************************************************************/

OSEK OSEK {

   OS	ExampleOS {
      /* si devuelve un error genérico o que tipo de error  */
      STATUS = EXTENDED;
      ERRORHOOK = TRUE;
      PRETASKHOOK = FALSE;
      POSTTASKHOOK = FALSE;
      STARTUPHOOK = FALSE;
      SHUTDOWNHOOK = FALSE;
      /* si quiero poner una func de scheduler propia */
      USERESSCHEDULER = FALSE;
      /* manejo de memoria propia */
      MEMMAP = FALSE;
   };
   /* forma de proteger una sección crítica */
   /* RESOURCE = POSIXR; */

   /*  */
   APPMODE = Normal;

   TASK Configuracion {
      PRIORITY = 1;
      /* cant de veces que puedo activar una misma tarea */
      ACTIVATION = 1;
      /* arranca en ready si el appmode es normal*/
      AUTOSTART = TRUE {
         APPMODE = Normal;
      }
      STACK = 512;
      /* tipo si admite el wait en extendida BASIC o EXTENDED */
      TYPE = BASIC;
      /* tarea cooperativa porque no quiero que nadie me interrumpan */
      /* en la inicialización */
      SCHEDULE = NON;
   }
   
   TASK KeyboardTask {
		PRIORITY = 2;
      ACTIVATION = 1;
      STACK = 512;
      TYPE = BASIC;
      SCHEDULE = NON;
   }
   
   ALARM ActivateKeyboardTask {
      COUNTER = HardwareTimer;
      ACTION = ACTIVATETASK {
         TASK = KeyboardTask;
      }
   }
   
   TASK TimeoutActionKeyTask {
      PRIORITY = 4;
      ACTIVATION = 1;
      STACK = 512;
      TYPE = BASIC;
      SCHEDULE = NON;
   }

   ALARM ActivateTimeoutActionKeyTask {
      COUNTER = HardwareTimer;
      ACTION = ACTIVATETASK {
         TASK = TimeoutActionKeyTask;
      }
   }

   COUNTER HardwareTimer {
      /*max 32768*/
      MAXALLOWEDVALUE = 32768;
      /* prescaler macho peludo, pero no anda */
      TICKSPERBASE = 1;
      MINCYCLE = 1;
      TYPE = HARDWARE;
      /* contador por hw que cuenta cada 100 ms*/
      COUNTER = HWCOUNTER0;
   };
};
